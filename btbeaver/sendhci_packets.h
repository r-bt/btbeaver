#include "constants.h"

/*********************** sendhci() PACKETS sent to the Bluetooth socket **********************/

// When calling sendhci(hcicommand,ndevice)  hcicommand is a char array with the following format:

#define PAKHEADSIZE 4
// PAKHEADSIZE = number of header bytes before packet
// header = first four bytes [0]-[3]
//    [0] = length of packet lo byte
//    [1] = length of packet hi byte
//    [2] = S2_ flags
//    [3] = S3_ flags
// [4].. packet - length bytes long

// The S2_ and S3_ flags specify how sendhci() modifies the packet by, for example, setting the board address
// [1].. are offsets from start of packet at [4]

#define S2_HAND 1 // dev[]->dhandle to [1][2] for 02 packets or [4][5] for 01 HCI cmd packets
#define S2_BADD (1 << 1) // dev[]->bdaddr board address to [4] or [10] if LE open
#define S2_ID (1 << 2) // dev[]->xd->id  L2CAP channel 0001 id to [10]
#define S2_DCIDC (1 << 3) // dev[]->xd->dcid L2CAP channel 0040+ to [7][8]
#define S2_ADD (1 << 4) // dev[]->rfchan modified RFCOMM address to [9]
#define S2_FCS2 (1 << 5) // set fcs at last byte  2 byte calc
#define S2_FCS3 (1 << 6) //                       3 byte calc
#define S2_SDP (1 << 7) // SDP operation

#define S3_DCID1 1 // dev[]->xd->dcid  L2CAP channel 0040+ to [13][14] remote device
#define S3_SCID2 (1 << 1) //            scid                         [15][16] local device
#define S3_SCID1 (1 << 2) //            scid                         [13][14] local device
#define S3_DCID2 (1 << 3) //            dcid                         [15][16] remote device
#define S3_DLCIPN (1 << 4) // dev[]->rfchan modified RFCOMM address to [14]  PN CMD
#define S3_ADDMSC (1 << 5) // dev[]->rfchan modified RFCOMM address to [14]  MSC CMD/RSP
#define S3_ADDX (1 << 6) // dev[]->rfchan modified RFCOMM address to [9]   UA reply

// hcicommand packets - send all the following via for example:  sendhci(bluclose,ndevice)
unsigned char locsup[8] = { 4, 0, 0, 0, 0x01, 0x02, 0x10, 0x00 };
unsigned char lemask[20] = { 12, 0, 0, 0, 0x01, 0x01, 0x20, 0x08, 0xFF, 0x05, 0, 0, 0, 0, 0, 0 }; // BF 05 for no data len event
unsigned char lesetscan[16] = { 11, 0, 0, 0, 0x01, 0x0B, 0x20, 0x07, 0x01, 0x10, 0x00, 0x10, 0x00, 0x00, 0x02 };
unsigned char locbadd[10] = { 4, 0, 0, 0, 0x01, 0x09, 0x10, 0 };
unsigned char lesuggest[16] = { 8, 0, 0, 0, 1, 0x24, 0x20, 4, 0xF8, 0, TRANSMITUS & 0xFF, (TRANSMITUS >> 8) & 0xFF };
unsigned char leopen[40] = { 29, 0, S2_BADD, 0,
    1, 0x0D, 0x20, 0x19, 0x60, 0, 0x60, 0, 0, 0, 0x7C, 0x17, 0x2D, 0xC0, 0x1E, 0, 0, 0x18, 0, 0x28, 0, 0, 0, 0x11, 0x01, 0, 0, 0, 0 }; // len 29
unsigned char leconnup[32] = { 21, 0, S2_HAND, 0, 2, 0x40, 0, 0x10, 0, 0x0C, 0, 0x05, 0, 0x12, 0x03, 0x08, 0x00, 0x06, 0x00, 0x06, 0x00, 0, 0, 0xF4, 0x01 };
unsigned char leupdate[32] = { 18, 0, S2_HAND, 0, 1, 0x13, 0x20, 0x0E, 0, 0, 0x18, 0, 0x28, 0, 0, 0, 0xF4, 0x01, 0, 0, 0, 0 }; // len 18
unsigned char lerrf[20] = { 6, 0, 0, 0, 1, 0x16, 0x20, 0x02, 0, 0 }; // len 6
                                                                     // LE open [10]... board address     [23][24] = timeout x 10ms
unsigned char lecancel[8] = { 4, 0, 0, 0, 0x01, 0x0E, 0x20, 0 };
unsigned char leconnreply[20] = { 15, 0, S2_HAND, 0, 2, 0x40, 0, 0x0A, 0, 0x06, 0, 0x05, 0, 0x13, 0x01, 2, 0, 0, 0 };

unsigned char bluclosex[16] = { 7, 0, 0, 0, 1, 6, 4, 3, 0x40, 0, 0x13 }; // len 7
unsigned char bluclose[16] = { 7, 0, S2_HAND, 0, 1, 6, 4, 3, 0x40, 0, 0x13 }; // len 7
                                                                              // Classic and LE disconnect  device handle=[4][5]
unsigned char lenotify[LEDATLEN + 20] = { 13, 0, S2_HAND, 0, 2, 0x40, 0, 8, 0, 4, 0, 4, 0, 0x1B, 0x0B, 0, 0 }; // len 13 if 1 byte
unsigned char lewrite[LEDATLEN + 20] = { 13, 0, S2_HAND, 0, 2, 0x40, 0, 8, 0, 4, 0, 4, 0, 0x52, 0x0B, 0, 0 }; // len 13 if 1 byte
                                                                                                              //  [1][2]=device handle  [9]=opcode  [10][11]=characteristic handle  [12]=data - up to LEDATLEN bytes
                                                                                                              //  [3]=size+7 [5]=size+3
unsigned char leread[20] = { 12, 0, S2_HAND, 0, 2, 0x40, 0, 7, 0, 3, 0, 4, 0, 0x0A, 0x12, 0 }; // len 12

//  [1][2]=device handle  [9]=0A read req [10][11]=handle of characteristic
unsigned char leindack[16] = { 10, 0, S2_HAND, 0, 2, 0x40, 0x00, 5, 0, 1, 0, 4, 0, 0x1E }; // ack indicate

unsigned char leread04[20] = { 14, 0, S2_HAND, 0, 2, 0x40, 0, 9, 0, 5, 0, 4, 0, 0x04, 0x01, 0, 0x01, 0x00 };
unsigned char lereaduuid2[32] = { 16, 0, S2_HAND, 0, 2, 0x40, 0, 11, 0, 7, 0, 4, 0, 0x08, 0x01, 0, 0xFF, 0xFF, 0x03, 0x28 };
unsigned char lereaduuid16[40] = { 30, 0, S2_HAND, 0, 2, 0x40, 0, 25, 0, 21, 0, 4, 0, 0x08, 0x01, 0, 0xFF, 0xFF,
    0x00, 0xFF, 0xEE, 0xDD, 0xCC, 0xBB, 0xAA, 0x99, 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11 };
unsigned char leconf[20] = { 10, 0, S2_HAND, 0, 2, 0x40, 0, 5, 0, 1, 0, 4, 0, 0x1E }; // len 12

unsigned char mtuset[20] = { 12, 0, S2_HAND, 0, 2, 0x40, 0, 7, 0, 3, 0, 4, 0, 0x02, 0x19, 0x00 }; // len 14
unsigned char datlenset[16] = { 10, 0, S2_HAND, 0, 1, 0x22, 0x20, 0x06, 0x40, 0x00, 0xFB, 0x00, TRANSMITUS & 0xFF, (TRANSMITUS >> 8) & 0xFF };
unsigned char paramnegreply[16] = { 7, 0, S2_HAND, 0, 1, 0x21, 0x20, 0x03, 0x40, 0x00, 0x3B };
unsigned char paramset[24] = { 18, 0, S2_HAND, 0, 1, 0x13, 0x20, 0x0E, 0x40, 0x00, 0x06, 0, 0x06, 0, 0, 0, 0xF4, 0x01, 0, 0, 0, 0 };
unsigned char paramreply[24] = { 18, 0, S2_HAND, 0, 1, 0x20, 0x20, 0x0E, 0x40, 0x00, 0x06, 0, 0x06, 0, 0, 0, 0xF4, 0x01, 0, 0, 0, 0 };
//  packet size = len+9      [3][4] = len + 4  [5][6] = len  [9] = data
unsigned char attdata[1024] = { 0, 0, S2_HAND, 0, 0x02, 0, 0, 0, 0, 0, 0, 0x04, 0x00 };

unsigned char lescanon[10] = { 6, 0, 0, 0, 1, 0x0C, 0x20, 2, 1, 0 }; // scan for LE devices on  duplicate filter off
unsigned char lescanonf[10] = { 6, 0, 0, 0, 1, 0x0C, 0x20, 2, 1, 1 }; // scan for LE devices on  duplicate filter on
unsigned char lescanoff[10] = { 6, 0, 0, 0, 1, 0x0C, 0x20, 2, 0, 0 }; // scan for LE devices off
                                                                      // n data = 8   [PAKHEADSIZE+11] = board
unsigned char leadvert[40] = { 36, 0, 0, 0, 0x01, 0x08, 0x20, 0x20, 0x0F, 0x08, 0xFF, 0x34, 0x12,
    0x00, 0x00, 0xC0, 0xDE, 0x99, 0x05, 0x08, 0x61, 0x62, 0x63, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
unsigned char hidadvert[40] = { 36, 0, 0, 0, 0x01, 0x08, 0x20, 0x20, 0x14, 0x02, 0x01, 0x06,
    0x04, 0x08, 0x48, 0x49, 0x44, 0x0B, 0x03, 0x12, 0x18, 0x00, 0x18, 0x01, 0x18, 0x0A, 0x18, 0x0F, 0x18, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

// set advertising parmeters  [8]=type 0=connectable 3=non connectable, unidirected adv
//        min int   max int    x0.625ms 0800 = 1.28s  0200=320ms
unsigned char leadparam[32] = { 19, 0, 0, 0, 0x01, 0x06, 0x20, 0x0F, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00 };
unsigned char leadparam4[32] = { 19, 0, 0, 0, 0x01, 0x06, 0x20, 0x0F, 0x00, 0x08, 0x00, 0x08, 0x01, 0x00, 0x00, 0xB8, 0x27, 0xEB, 0xF1, 0x50, 0xC3, 0x07, 0x00 };
// le advert  [4] 0=disable  1=enable
unsigned char leadvon[16] = { 5, 0, 0, 0, 0x01, 0x0A, 0x20, 0x01, 0x01 };
unsigned char leadvoff[16] = { 5, 0, 0, 0, 0x01, 0x0A, 0x20, 0x01, 0x00 };

// classic scan ogf=1 (04)  ocf = 1  LAP=9e8b33 general discovery  time=8x1.28=10 secs num resp=0 unlimited
unsigned char cscan[16] = { 9, 0, 0, 0, 1, 0x01, 0x04, 5, 0x33, 0x8B, 0x9E, 8, 0 };
unsigned char cname[20] = { 14, 0, S2_BADD, 0, 1, 0x19, 0x04, 0x0A, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 2, 0, 0, 0 };
// [4] 0=off 1=on
unsigned char scanr[10] = { 4, 0, 0, 0, 1, 0x19, 0x0C, 0 }; // len 4 read I/P scan settings
unsigned char scanx[10] = { 5, 0, 0, 0, 1, 0x1A, 0x0C, 1, 0 }; // len 5   I/P scans [8] 0=off  3=I/P scans
unsigned char scanip[10] = { 5, 0, 0, 0, 1, 0x1A, 0x0C, 1, 3 }; // len 5   I/P scans [8] 0=off  3=I/P scans
unsigned char readspm[10] = { 4, 0, 0, 0, 1, 0x55, 0x0C, 0 }; // read simple pairing
unsigned char clrspm[10] = { 5, 0, 0, 0, 1, 0x56, 0x0C, 1, 0 }; // set simple pairing [4]  0=off
unsigned char readauth[10] = { 4, 0, 0, 0, 1, 0x1F, 0x0C, 0 }; // read authentication
unsigned char setauth[10] = { 5, 0, 0, 0, 1, 0x20, 0x0C, 1, 0 }; // set authentication [4] 0=off 1=on
unsigned char readexinq[10] = { 4, 0, 0, 0, 1, 0x51, 0x0C, 0 }; // read ex inq
unsigned char pinreply[40] = { 27, 0, S2_BADD, 0, 1, 0x0D, 0x04, 23, 0x56, 0xDB, 0x04, 0x32, 0xA6, 0xDC, 4, '0', '0', '0', '0', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
unsigned char readlocname[32] = { 4, 0, 0, 0, 1, 0x14, 0x0C, 0 };
unsigned char readremname[32] = { 14, 0, S2_BADD, 0, 1, 0x19, 4, 0x0A, 0x56, 0xDB, 0x04, 0x32, 0xA6, 0xDC, 2, 0, 0, 0 };

// [PAKHEADSIZE+10] = key
unsigned char linkey[32] = { 26, 0, S2_BADD, 0, 0x01, 0x0B, 0x04, 0x16, 0x13, 0x71, 0xDA, 0x7D, 0x1A, 0x00,
    0x08, 0x7A, 0xC7, 0xFB, 0x8C, 0x86, 0xF3, 0xCF, 0x36, 0xF4, 0x0C, 0xD8, 0xDD, 0xA2, 0xF9, 0xD3 };

unsigned char pincode[40] = { 27, 0, S2_BADD, 0, 1, 0x0D, 4, 23, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 4, '1', '2', '3', '4', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
unsigned char passkey[40] = { 14, 0, S2_BADD, 0, 1, 0x2E, 4, 10, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x01, 0x02, 0x03, 0x04 };

unsigned char sabm0[64] = { 13, 0, S2_HAND | S2_DCIDC | S2_FCS3, 0, 0x02, 0x0C, 0x00, 0x08, 0x00, 0x04, 0x00, 0x40, 0x00, 0x03, 0x3F, 0x01, 0x1C };

unsigned char pncmd[64] = { 23, 0, S2_HAND | S2_DCIDC | S2_FCS2, S3_DLCIPN, 0x02, 0x0C, 0x00, 0x12, 0x00, 0x0E, 0x00, 0x40, 0x00, 0x03, 0xEF, 0x15, 0x83, 0x11, 0x02, 0xF0,
    0x07, 0x00, 0x00, 0x04, 0x00, 0x07, 0x70 };
// [PAKHEADSIZE+18][19] = frame size  0400
unsigned char pnreply[64] = { 23, 0, S2_HAND | S2_DCIDC | S2_FCS2, S3_DLCIPN, 0x02, 0x0C, 0x00, 0x12, 0x00, 0x0E, 0x00, 0x40, 0x00, 0x01, 0xEF, 0x15, 0x81, 0x11, 0x02, 0xF0,
    0x07, 0x00, 0x00, 0x04, 0x00, 0x07, 0x70 };

unsigned char sabmx[64] = { 13, 0, S2_HAND | S2_DCIDC | S2_ADD | S2_FCS3, 0, 0x02, 0x0C, 0x00, 0x08, 0x00, 0x04, 0x00, 0x40, 0x00, 0x0B, 0x3F, 0x01, 0x59 };

unsigned char msccmdrspe[64] = { 17, 0, S2_HAND | S2_DCIDC | S2_FCS2, S3_ADDMSC, 0x02, 0x0C, 0x00, 0x0C, 0x00, 0x08, 0x00, 0x40, 0x00,
    0x03, 0xEF, 0x09, 0xE3, 0x05, 0x0B, 0x8D, 0x70 };

unsigned char msccmdrsp9[64] = { 23, 0, S2_HAND | S2_DCIDC | S2_FCS2, S3_ADDMSC, 0x02, 0x0C, 0x00, 0x12, 0x00, 0x0E, 0x00, 0x41,
    0x00, 0x01, 0xEF, 0x15, 0x93, 0x11, 0x0B, 0x07, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0xAA };

unsigned char msccmdsend[32] = { 17, 0, S2_HAND | S2_DCIDC | S2_FCS2, S3_ADDMSC, 0x02, 0x0C, 0x00, 0x0C, 0x00, 0x08, 0x00, 0x40, 0x00, 0x03, 0xEF, 0x09, 0xE3, 0x05, 0x0B, 0x8D,
    0x70 };

unsigned char setcred[64] = { 14, 0, S2_HAND | S2_DCIDC | S2_ADD | S2_FCS2, 0, 0x02, 0x0C, 0x00, 0x09, 0x00, 0x05, 0x00, 0x40, 0x00, 0x0B, 0xFF, 0x01, TOPUPCREDIT, 0x86 };
unsigned char setcred0[64] = { 14, 0, S2_HAND | S2_DCIDC | S2_FCS2, 0, 0x02, 0x0C, 0x00, 0x09, 0x00, 0x05, 0x00, 0x40, 0x00, 0x09, 0xFF, 0x01, 0x21, 0x86 };
// [PAKHEADSIZE+12] = number of credits = TOPUPCREDIT

unsigned char closereqrf[64] = { 13, 0, S2_HAND | S2_DCIDC | S2_ADD | S2_FCS3, 0, 0x02, 0x0C, 0x00, 0x08, 0x00, 0x04, 0x00, 0x40, 0x00, 0x09, 0x53, 0x01, 0xF3 };
unsigned char closereq0[64] = { 13, 0, S2_HAND | S2_DCIDC | S2_FCS3, 0, 0x02, 0x0C, 0x00, 0x08, 0x00, 0x04, 0x00, 0x40, 0x00, 0x03, 0x53, 0x01, 0xF3 };

unsigned char uareply[20] = { 13, 0, S2_HAND | S2_DCIDC | S2_FCS3, 0, 0x02, 0x0C, 0x00, 0x08, 0x00, 0x04, 0x00, 0x40, 0x00, 0x01, 0x73, 0x01, 0xB6 };

unsigned char blusend[2048] = { 14, 0, S2_HAND | S2_DCIDC | S2_ADD | S2_FCS2, 0, 0x02, 0x0C, 0x00, 0x09, 0x00, 0x05, 0x00, 0x40, 0x00, 0x0B, 0xEF, 0x03, 0x21, 0x9A };

unsigned char clopen[32] = { 17, 0, S2_BADD, 0,
    0x01, 0x05, 0x04, 0x0D, 0x56, 0xDB, 0x04, 0x32, 0xA6, 0xDC, 0x18, 0xCC, 0x02, 0x00, 0x00, 0x00, 0x01 };
// classic open [4].. board address
unsigned char clcancel[16] = { 10, 0, S2_BADD, 0, 0x01, 0x08, 0x04, 6, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66 };

unsigned char setspm[10] = { 5, 0, 0, 0, 1, 0x56, 0x0C, 1, 1 }; // set simple pairing [4]  1=on
unsigned char eventmask[20] = { 12, 0, 0, 0, 1, 1, 0x0C, 8, 0xFF, 0xFF, 0xFB, 0xFF, 0x07, 0xF8, 0xBF, 0x3D }; // default  FF FF DF = disable PIN request
unsigned char authreq[16] = { 6, 0, S2_HAND, 0, 0x01, 0x11, 0x04, 0x02, 0x0C, 0x00 };
unsigned char linkreply[20] = { 10, 0, S2_BADD, 0, 0x01, 0x0C, 0x04, 0x06, 0x56, 0xDB, 0x04, 0x32, 0xA6, 0xDC };

unsigned char iocapreply[20] = { 13, 0, S2_BADD, 0, 0x01, 0x2B, 0x04, 0x09, 0x56, 0xDB, 0x04, 0x32, 0xA6, 0xDC, 0x03, 0x00, 0x00 };
unsigned char confreply[16] = { 10, 0, S2_BADD, 0, 0x01, 0x2C, 0x04, 0x06, 0x56, 0xDB, 0x04, 0x32, 0xA6, 0xDC };
unsigned char encrypt[16] = { 7, 0, S2_HAND, 0, 0x01, 0x13, 0x04, 0x03, 0x0C, 0x00, 0x01 };

unsigned char psmreply[32] = { 21, 0, S2_HAND | S2_ID, S3_SCID1 | S3_DCID2, 0x02, 0x0C, 0x00, 0x10, 0x00, 0x0C, 0x00, 0x01, 0x00, 0x03, 0x03, 0x08, 0x00, 0x04, 0x00, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00 };

unsigned char conpsm1[32] = { 17, 0, S2_HAND | S2_ID, S3_SCID2, 0x02, 0x0C, 0x00, 0x0C, 0x00, 0x08, 0x00, 0x01, 0x00, 0x02, 0x03, 0x04, 0x00, 0x01, 0x00, 0x40, 0x00 };
// psm = 1/3 at PAKHEADSIZE+ [13]
unsigned char figreply[40] = { 23, 0, S2_HAND | S2_ID, S3_DCID1, 0x02, 0x0C, 0x00, 0x12, 0x00, 0x0E, 0x00, 0x01, 0x00, 0x05, 0x03, 0x0A, 0x00, 0x40, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x01, 0x02, 0xF5, 0x03 };
unsigned char figreq[40] = { 32, 0, S2_HAND | S2_ID, S3_DCID1, 0x02, 0x0C, 0x00, 0x1B, 0x00, 0x17, 0x00, 0x01, 0x00, 0x04, 0x04, 0x13, 0x00, 0x40, 0x00, 0x00,
    0x00, 0x01, 0x02, 0xF5, 0x03, 0x04, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

// SSA request to read SDP database
// PAKHEADSIZE+[]
// returns all records containing 2-byte UUID = [17][18] = 0003 so will find RFCOMM channels which have aid=4/UUID=0100/UUID=0003
// returns aids in range [24][25] = 0000  to [26][27] = FFFF so all aid
// need aid=1 (registered UUID of service)  aid=4 (RFCOMM channel number)  aid=0100 (service name)
// set [24][25] = 0001  [26][27] = 0004 to read aid = 1 to 4 only to find RFCOMM channels (but will miss service name aid = 0100)

unsigned char ssareq[128] = { 29, 0, S2_HAND | S2_SDP, 0, 0x02, 0x0C, 0x00, 0x18, 0x00, 0x14, 0x00, 0x41, 0x00, 0x06, 0x00, 0x00, 0x00, 0x0F, 0x35, 0x03,
    0x19, 0x00, 0x03, 0xFF, 0xFF, 0x35, 0x05, 0x0A, 0x00, 0x00, 0xFF, 0xFF, 0x00 }; // MAY ADD TO LENGTH leave [128] long all aid

unsigned char psmdisreq[32] = { 17, 0, S2_HAND | S2_ID, S3_DCID1 | S3_SCID2, 0x02, 0x0C, 0x00, 0x0C, 0x00, 0x08, 0x00, 0x01, 0x00, 0x06, 0x09, 0x04, 0x00, 0x40, 0x00, 0x40,
    0x00 };

unsigned char psmdisreply[32] = { 17, 0, S2_HAND | S2_ID, S3_SCID1 | S3_DCID2, 0x02, 0x0C, 0x00, 0x0C, 0x00, 0x08, 0x00, 0x01, 0x00, 0x07, 0x08, 0x04, 0x00, 0x40, 0x00, 0x40,
    0x00 };

unsigned char foboff[32] = { 21, 0, S2_HAND | S2_ID, 0, 0x02, 0x0C, 0x00, 0x10, 0x00, 0x0C, 0x00, 0x01, 0x00, 0x03, 0x05, 0x08, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x04, 0x00, 0x00, 0x00 };
// [PAKHEADSIZE+17] = 04  no resources - connection failed   scid/dcid ignored  OK reply was S3_SCID1 | S3_DCID2

unsigned char storekey[40] = { 27, 0, S2_BADD, 0, 1, 0x11, 0x0C, 23, 1, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
// board address at PAKHEADSIZE +  [5]  key at [11-26]
unsigned char readstorekey[16] = { 11, 0, S2_BADD, 0, 1, 0x0D, 0x0C, 7, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0 };

// inforeply()
unsigned char inforeply2[32] = { 21, 0, S2_HAND | S2_ID, 0, 0x02, 0x0C, 0x00, 0x10, 0x00, 0x0C, 0x00, 0x01, 0x00, 0x0B, 0x01, 0x08, 0x00, 0x02, 0x00, 0x00,
    0x00, 0xB8, 0x02, 0x00, 0x00 };
unsigned char inforeply3[32] = { 25, 0, S2_HAND | S2_ID, 0, 0x02, 0x0C, 0x00, 0x14, 0x00, 0x10, 0x00, 0x01, 0x00, 0x0B, 0x02, 0x0C, 0x00, 0x03, 0x00, 0x00,
    0x00, 0x86, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
unsigned char echoreq[20] = { 13, 0, S2_HAND | S2_ID, 0, 0x02, 0x0C, 0x00, 0x08, 0x00, 0x04, 0x00, 0x01, 0x00, 0x08, 0x01, 0x00, 0x00 };
unsigned char echoreply[20] = { 13, 0, S2_HAND | S2_ID, 0, 0x02, 0x0C, 0x00, 0x08, 0x00, 0x04, 0x00, 0x01, 0x00, 0x09, 0x01, 0x00, 0x00 };

unsigned char readcto[10] = { 4, 0, 0, 0, 0x01, 0x15, 0x0C, 0x00 };
unsigned char setcto[16] = { 6, 0, 0, 0, 0x01, 0x16, 0x0C, 0x02, 0xA0, 0x3F };
unsigned char readpto[10] = { 4, 0, 0, 0, 0x01, 0x17, 0x0C, 0x00 };
unsigned char setpto[16] = { 6, 0, 0, 0, 0x01, 0x18, 0x0C, 0x02, 0x00, 0x40 };

unsigned char lebufsz[8] = { 4, 0, 0, 0, 0x01, 0x02, 0x20, 0 };

// classic server
unsigned char conaccept[16] = { 11, 0, S2_BADD, 0, 0x01, 0x09, 0x04, 0x07, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x00 };
unsigned char conreject[16] = { 11, 0, 0, 0, 0x01, 0x0A, 0x04, 0x07, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x0D };
unsigned char spcomp[20] = { 10, 0, S2_BADD, 0, 0x01, 0x2C, 0x04, 0x06, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66 };

unsigned char baseuuid[16] = { 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF, 0xFF };
unsigned char standard[16] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x80, 0x00, 0x00, 0x80, 0x5F, 0x9B, 0x34, 0xFB };

// LE server
unsigned char lereadreply[LEDATLEN + 20] = { 11, 0, S2_HAND, 0, 2, 0x40, 0, 0x06, 0, 0x02, 0, 4, 0, 0x0B, 0 }; // length 10+number bytes

unsigned char le05reply[40] = { 15, 0, S2_HAND, 0, 2, 0x40, 0, 0x0A, 0, 0x06, 0, 4, 0, 0x05, 0x01 };
unsigned char le07reply[20] = { 14, 0, S2_HAND, 0, 2, 0x40, 0, 0x09, 0, 0x05, 0, 4, 0, 0x07, 0x00, 0x00, 0x00, 0x00 };

unsigned char le09replyv[LEDATLEN + 24] = { 32, 0, S2_HAND, 0, 2, 0x40, 0, 0x1B, 0, 0x17, 0, 4, 0, 0x09 };

unsigned char leack[16] = { 10, 0, S2_HAND, 0, 2, 0x40, 0, 0x05, 0, 0x01, 0, 4, 0, 0x13 };
unsigned char lemtu[16] = { 12, 0, S2_HAND, 0, 2, 0x40, 0, 0x07, 0, 0x03, 0, 4, 0, 0x03, 23, 0 }; // MTU 23-512

unsigned char fob05[20] = { 15, 0, S2_HAND, 0, 2, 0x40, 0, 0x0A, 0, 0x06, 0, 4, 0, 0x05, 0x01, 0x01, 0x00, 0x00, 0x28 };
unsigned char fob09[20] = { 15, 0, S2_HAND, 0, 2, 0x40, 0, 0x0A, 0, 0x06, 0, 4, 0, 0x09, 0x04, 0x01, 0x00, 0x00, 0x18 };
unsigned char fob11[24] = { 17, 0, S2_HAND, 0, 2, 0x40, 0, 0x0C, 0, 0x08, 0, 4, 0, 0x11, 0x06, 0x01, 0x00, 0xFF, 0xFF, 0x00, 0x18 };

unsigned char lefail[20] = { 14, 0, S2_HAND, 0, 2, 0x40, 0, 9, 0, 5, 0, 4, 0, 0x01, 0x08, 0, 0, 0x0A };

unsigned char custuuid[16] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
char custname[64] = "None";

/********************** END sendhci() PACKETS *********************/